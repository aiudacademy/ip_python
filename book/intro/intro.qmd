# Introducción a la programación y al lenguaje Python

Al final de este capítulo, los estudiantes entenderán los conceptos básicos de la programación y la importancia de los lenguajes de programación. También, aprenderán sobre las características y ventajas del lenguaje Python, cómo instalar el ambiente de desarrollo utilizando Anaconda y cómo trabajar con ambientes virtuales para administrar proyectos en Python.

## ¿Qué es la programación?

Al final de esta sección, comprenderán el concepto de programación y conocerán la diferencia entre lenguajes de programación, algoritmos y pseudocódigo, así como los procesos de interpretación y compilación para la ejecución de programas. 

### Definición de programación

Según Wikipedia la programación es el proceso de crear un conjunto de instrucciones que le dicen a una computadora como realizar algún tipo de tarea. Pero no solo la acción de escribir un código para que la computadora o el software lo ejecute. Incluye, además, todas las tareas necesarias para que el código funcione correctamente y cumpla el objetivo para el cual se escribió.


### Lenguajes de programación



### Algoritmos y pseudocódigo

Un algoritmo es una secuencia finita de pasos, reglas o instrucciones bien definidas, que se utilizan para resolver un problema o llevar a cabo una tarea específica. Los algoritmos se pueden representar mediante diagramas de flujo, pseudocódigo u otros métodos. El pseudocódigo es una representación de alto nivel de un algoritmo, que utiliza una estructura similar a un lenguaje de programación pero sin seguir las reglas de sintaxis específicas. El pseudocódigo permite a los programadores diseñar y analizar algoritmos sin preocuparse por los detalles de implementación en un lenguaje de programación específico.

Ejemplo de pseudocódigo para calcular la suma de los números del 1 al N:

```
Inicio
   Leer N
   Suma = 0
   Para i = 1 hasta N:
       Suma = Suma + i
   Fin Para
   Escribir Suma
Fin

```

### Ejecución de programas

La ejecución de programas implica la interpretación y ejecución de las instrucciones escritas en un lenguaje de programación por parte de una computadora. Dependiendo del lenguaje de programación utilizado, existen dos enfoques principales para ejecutar programas: interpretación y compilación.

- Interpretación: Los lenguajes interpretados, como Python, utilizan un programa llamado intérprete que lee y ejecuta el código fuente línea por línea, convirtiendo las instrucciones en lenguaje de máquina que la computadora puede entender y ejecutar. Los programas interpretados suelen ser más lentos en la ejecución pero más rápidos en el desarrollo y depuración, ya que no es necesario compilar el código.

- Compilación: Los lenguajes compilados, como C++, requieren un programa llamado compilador que convierte el código fuente en un archivo ejecutable en lenguaje de máquina antes de que pueda ser ejecutado por la computadora. Los programas compilados suelen ser más rápidos en la ejecución pero requieren un proceso de compilación antes de ser ejecutados, lo que puede aumentar el tiempo de desarrollo y depuración.

## Historia de la programación
### Primeras máquinas programables

El inicio de la programación se remonta a las primeras máquinas capaces de realizar cálculos matemáticos. A continuación, se mencionan algunas de estas máquinas:

- La Máquina Analítica de Charles Babbage (1837): Babbage diseñó esta máquina mecánica para realizar cálculos matemáticos automáticamente utilizando tarjetas perforadas, que contenían las instrucciones para los cálculos. Aunque la Máquina Analítica nunca fue construida completamente, sus conceptos influyeron en el diseño de futuras computadoras.

- El Telar de Jacquard (1801): El telar de Jacquard, inventado por Joseph Marie Jacquard, fue una innovación en la industria textil que permitía controlar automáticamente el patrón de tejido utilizando tarjetas perforadas. Aunque no era una máquina de cómputo, el concepto de tarjetas perforadas influyó en el almacenamiento y lectura de datos en las primeras computadoras.

- La Máquina de Turing (1936): Alan Turing propuso la Máquina de Turing como un modelo teórico para resolver problemas matemáticos y lógicos mediante la manipulación de símbolos en una cinta infinita. La Máquina de Turing es considerada como el modelo básico para las computadoras digitales modernas y la base de la teoría de la computación.

### Evolución de los lenguajes de programación

La evolución de los lenguajes de programación ha sido una parte fundamental en el avance de la informática. Los lenguajes de programación han pasado por varias generaciones, desde el código máquina y ensamblador hasta los lenguajes de alto nivel que facilitan la escritura de programas.

- 1ª Generación: Lenguaje máquina (1940-1950): Las primeras computadoras utilizaban código máquina, una serie de números binarios que representaban instrucciones específicas para la máquina. Los programadores debían escribir programas en código máquina, lo cual era un proceso tedioso y propenso a errores.

- 2ª Generación: Lenguaje ensamblador (1950-1960): El lenguaje ensamblador fue un avance que permitía a los programadores escribir instrucciones utilizando mnemónicos, que eran más fáciles de entender y recordar que el código máquina. Los programas escritos en lenguaje ensamblador eran luego traducidos a código máquina por un ensamblador.

- 3ª Generación: Lenguajes de alto nivel (1950-presente): Los lenguajes de alto nivel, como FORTRAN, COBOL, LISP y ALGOL, permitieron a los programadores escribir instrucciones utilizando palabras y símbolos más cercanos al lenguaje humano. Estos lenguajes facilitaron el desarrollo de programas y permitieron la creación de aplicaciones más complejas. Los lenguajes de alto nivel evolucionaron y dieron origen a otros lenguajes populares como C, Pascal, C++, Java, Python y JavaScript.

### Paradigmas de programación

Los paradigmas de programación representan diferentes enfoques o estilos para organizar y estructurar programas informáticos. Algunos de los paradigmas de programación más comunes son:

- Programación imperativa: En este paradigma, los programas consisten en secuencias de instrucciones que modifican el estado del programa. Los programas imperativos suelen utilizar estructuras de control como bucles, condicionales y funciones. Ejemplos de lenguajes que soportan la programación imperativa incluyen C, C++, Java y Python.

- Programación declarativa: A diferencia de la programación imperativa, que se centra en cómo realizar una tarea, la programación declarativa se centra en describir qué se quiere obtener sin especificar cómo lograrlo. Un subconjunto de la programación declarativa es la programación funcional, que evita el uso de estados y datos mutables. Ejemplos de lenguajes de programación declarativa incluyen SQL, Prolog y Haskell.

- Programación orientada a objetos (OOP): La programación orientada a objetos es un enfoque que organiza el código en "objetos" que representan entidades del mundo real, con propiedades (atributos) y comportamientos (métodos). Este paradigma promueve la encapsulación, la herencia y el polimorfismo, lo que facilita el desarrollo de sistemas complejos y la reutilización del código. Ejemplos de lenguajes que soportan la programación orientada a objetos incluyen Java, C++, C# y Python.

- Programación estructurada: La programación estructurada es un enfoque que organiza el código utilizando estructuras de control como secuencias, selección (condicionales) y repetición (bucles), evitando el uso de saltos incondicionales como "goto". La programación estructurada mejora la legibilidad y la mantenibilidad del código. Ejemplos de lenguajes que soportan la programación estructurada incluyen C, Pascal y Ada.

- Programación lógica: En la programación lógica, los programas consisten en una serie de declaraciones o hechos que describen relaciones y reglas lógicas. Los programas lógicos se ejecutan mediante un motor de inferencia que deduce nuevas conclusiones o resultados a partir de las declaraciones y reglas proporcionadas. La programación lógica es especialmente útil en la inteligencia artificial y la resolución de problemas que involucran relaciones complejas y restricciones. Un ejemplo de lenguaje de programación lógica es Prolog.

- Programación concurrente: La programación concurrente es un enfoque que permite la ejecución simultánea de múltiples tareas o procesos, lo cual es útil en aplicaciones que requieren la gestión de múltiples usuarios o eventos simultáneos. La programación concurrente se ocupa de problemas como la sincronización, la comunicación y la compartición de recursos entre tareas concurrentes. Ejemplos de lenguajes que soportan la programación concurrente incluyen Java, C#, Go y Erlang.

Cabe destacar que muchos lenguajes de programación modernos soportan múltiples paradigmas, lo que permite a los programadores elegir el enfoque más adecuado para cada problema o tarea.

## Lenguaje Python: características y ventajas
### Historia de Python

Python fue creado por Guido van Rossum a finales de la década de 1980 y su primera versión pública (Python 0.9.0) fue lanzada en 1991. Van Rossum quería crear un lenguaje de programación fácil de leer, escribir y mantener, con una sintaxis clara y simple. Python fue influenciado por lenguajes como ABC, Modula-3 y C. Con el tiempo, Python ha evolucionado y ganado popularidad, convirtiéndose en uno de los lenguajes de programación más utilizados en la actualidad.

### Características del lenguaje Python

Python es un lenguaje de programación de alto nivel con una serie de características distintivas:

- Sintaxis clara y legible: La sintaxis de Python se basa en la indentación, lo que facilita la lectura y comprensión del código, incluso para principiantes.

- Tipado dinámico: Python es un lenguaje de tipado dinámico, lo que significa que las variables pueden cambiar de tipo en tiempo de ejecución. Esto permite mayor flexibilidad en la escritura de código.

- Orientación a objetos: Python es un lenguaje orientado a objetos, lo que permite la creación de clases y objetos para modelar y organizar el código de manera más estructurada.

- Biblioteca estándar extensa: Python incluye una amplia biblioteca estándar con módulos y funciones que facilitan la realización de tareas comunes como el manejo de archivos, comunicación en red y operaciones matemáticas.

- Multiplataforma: Python es compatible con diferentes sistemas operativos como Windows, macOS y Linux.

- Interactivo: Python permite la ejecución interactiva de código a través de un intérprete, lo que facilita la depuración y el aprendizaje del lenguaje.

### Ventajas y aplicaciones de Python

Python ofrece varias ventajas que lo convierten en una opción popular para diferentes aplicaciones:

- Facilidad de aprendizaje: La sintaxis simple y legible de Python lo convierte en un lenguaje ideal para principiantes en programación.

- Versatilidad: Python es un lenguaje multiparadigma que se adapta a diferentes estilos de programación y puede utilizarse en diversos tipos de proyectos, desde aplicaciones web hasta análisis de datos y desarrollo de videojuegos.

- Comunidad activa: Python cuenta con una amplia comunidad de desarrolladores que contribuyen con bibliotecas y paquetes adicionales para extender las capacidades del lenguaje, así como con tutoriales, cursos y documentación para facilitar el aprendizaje de Python.

- Integración con otros lenguajes: Python puede interactuar con otros lenguajes de programación como C, C++ y Java, lo que permite la reutilización de código y la optimización de ciertas partes del programa.

#### Algunas aplicaciones comunes de Python incluyen:

- Desarrollo web: Con frameworks como Django y Flask, Python es una opción popular para crear aplicaciones web escalables y eficientes.

- Análisis de datos y ciencia de datos: Python es ampliamente utilizado en análisis de datos, inteligencia artificial y aprendizaje automático, gracias a bibliotecas como NumPy, pandas, TensorFlow y scikit-learn.

- Automatización y scripting: Python es ideal para automatizar tareas repetitivas y crear scripts para simplificar procesos, gracias a su facilidad de uso y a su extensa biblioteca estándar.

- Desarrollo de videojuegos: Python se utiliza en el desarrollo de videojuegos con la ayuda de bibliotecas y motores como Pygame y Panda3D.

- Desarrollo de aplicaciones de escritorio: Con bibliotecas como PyQt y Tkinter, Python permite crear aplicaciones de escritorio con interfaces gráficas de usuario.

- Internet de las cosas (IoT): Python también se utiliza en el desarrollo de aplicaciones para dispositivos IoT, gracias a su compatibilidad con plataformas como Raspberry Pi y su facilidad de integración con hardware.

### Comunidad y recursos de Python

La comunidad de Python es uno de los aspectos más valiosos del lenguaje. Con una amplia base de usuarios y desarrolladores, es fácil encontrar ayuda, colaboración y recursos para aprender y mejorar en Python. Algunos de los recursos más relevantes incluyen:

- Documentación oficial de Python: La documentación oficial de Python ([https://docs.python.org](https://docs.python.org)) es un recurso completo que incluye tutoriales, guías y referencias para todos los aspectos del lenguaje y su biblioteca estándar.

- Python Package Index (PyPI): PyPI ([https://pypi.org](https://pypi.org)) es un repositorio de paquetes y bibliotecas de terceros desarrollados por la comunidad de Python. Aquí puedes encontrar soluciones y extensiones para una amplia variedad de problemas y aplicaciones.

- Foros y comunidades en línea: La comunidad de Python es activa en foros como Stack Overflow ([https://stackoverflow.com](https://stackoverflow.com)) y Reddit ([https://www.reddit.com/r/Python](https://www.reddit.com/r/Python)), donde puedes hacer preguntas, compartir conocimientos y colaborar con otros desarrolladores.

- Conferencias y eventos: La comunidad de Python organiza eventos y conferencias en todo el mundo, como PyCon ([https://www.pycon.org](https://www.pycon.org)) y EuroPython ([https://www.europython.eu](https://www.europython.eu)), donde los desarrolladores pueden aprender, colaborar y conectarse con otros profesionales y entusiastas del lenguaje.

- Cursos y tutoriales: Existen numerosos cursos y tutoriales en línea, tanto gratuitos como de pago, que cubren diversos aspectos de Python, desde conceptos básicos hasta temas avanzados como ciencia de datos y desarrollo web. Algunos recursos populares incluyen Codecademy ([https://www.codecademy.com](https://www.codecademy.com)), Coursera ([https://www.coursera.org](https://www.coursera.org)) y edX ([https://www.edx.org](https://www.edx.org)).

## Instalación del ambiente de desarrollo (Anaconda)
### ¿Qué es Anaconda?

Anaconda es una distribución gratuita y de código abierto de los lenguajes de programación Python y R, que se utiliza ampliamente en la ciencia de datos, el aprendizaje automático y la computación científica. Anaconda simplifica la gestión de paquetes y entornos, proporcionando una plataforma unificada para instalar y administrar múltiples versiones de paquetes y sus dependencias. Además, Anaconda incluye herramientas como Jupyter Notebook y JupyterLab, que facilitan el desarrollo y la colaboración en proyectos de análisis de datos y computación científica.

### Instalación de Anaconda en diferentes sistemas operativos (Windows, macOS, Linux)

Para instalar Anaconda en tu sistema operativo, sigue los pasos a continuación:

Visita la página de descargas de [Anaconda](https://www.anaconda.com/products/distribution) y selecciona la versión adecuada para tu sistema operativo (Windows, macOS o Linux).

Descarga el instalador de Anaconda correspondiente a tu sistema operativo.

Ejecuta el instalador y sigue las instrucciones en pantalla. Durante la instalación, se te preguntará si deseas instalar Anaconda para todos los usuarios del sistema o solo para tu usuario actual. Se recomienda instalar Anaconda para todos los usuarios si tienes permisos de administrador en tu computadora.

Windows: Ejecuta el archivo .exe descargado y sigue las instrucciones en pantalla.

macOS: Ejecuta el archivo .pkg descargado y sigue las instrucciones en pantalla.

Linux: Abre una terminal, navega hasta el directorio donde se encuentra el archivo .sh descargado y ejecuta el siguiente comando: bash ```nombre_del_archivo.sh```, donde ```nombre_del_archivo.sh``` es el nombre del archivo descargado. Sigue las instrucciones en pantalla.

### Verificación de la instalación y actualización de Anaconda

Una vez que hayas instalado Anaconda, es importante verificar que se haya instalado correctamente y actualizarlo a la última versión. Para hacer esto, sigue los pasos a continuación:

- Abre una terminal (o Anaconda Prompt en Windows) y ejecuta el siguiente comando para verificar que Anaconda está instalado correctamente: ```conda --version```. Deberías ver la versión actual de conda en la respuesta.

- Para actualizar Anaconda a la última versión, ejecuta el siguiente comando: ```conda update --all```. Este comando actualizará todos los paquetes y dependencias a sus últimas versiones compatibles.

### Introducción a Jupyter Notebook y JupyterLab

Jupyter Notebook y JupyterLab son entornos de desarrollo interactivo que permiten crear y compartir documentos que contienen código, texto, imágenes y gráficos en vivo. Estas herramientas facilitan la exploración de datos, el análisis y la comunicación de resultados en un formato fácil de entender y compartir.

- Jupyter Notebook: Para iniciar Jupyter Notebook, abre una terminal (o Anaconda Prompt en Windows) y ejecuta el comando jupyter notebook. Esto abrirá una nueva ventana o pestaña en tu navegador web con la interfaz de Jupyter Notebook. Desde aquí, puedes crear nuevos cuadernos, abrir cuadernos existentes y administrar tus archivos

- JupyterLab: JupyterLab es una evolución de Jupyter Notebook que ofrece una experiencia de usuario más avanzada e integrada. Para iniciar JupyterLab, abre una terminal (o Anaconda Prompt en Windows) y ejecuta el comando jupyter lab. Esto abrirá una nueva ventana o pestaña en tu navegador web con la interfaz de JupyterLab. JupyterLab presenta una interfaz similar a la de un entorno de desarrollo integrado (IDE), con una barra lateral que facilita la navegación y organización de tus archivos, así como la posibilidad de abrir múltiples cuadernos y otros documentos en pestañas.

Ambos entornos, Jupyter Notebook y JupyterLab, permiten ejecutar código en celdas individuales e interactivas, lo que facilita la experimentación y depuración. Además, puedes agregar texto en formato Markdown para proporcionar explicaciones, fórmulas matemáticas y visualizaciones en línea con tu código.

Con Jupyter Notebook y JupyterLab, puedes crear documentos completos y autocontenidos que incluyan tanto el código como la explicación de tus análisis y resultados, lo que facilita la colaboración y la comunicación de tus proyectos. Estos documentos se pueden exportar a diversos formatos, como HTML, PDF y presentaciones de diapositivas, para compartirlos fácilmente con otras personas.

En resumen, la instalación de Anaconda proporciona un entorno de desarrollo completo y unificado para trabajar con Python, especialmente en proyectos de ciencia de datos y análisis. Con herramientas como Jupyter Notebook y JupyterLab, puedes explorar y analizar datos de manera interactiva y eficiente, así como compartir tus resultados y conocimientos de manera clara y accesible.

## Ambientes Virtuales en Python
### ¿Qué es un ambiente virtual?

Un ambiente virtual en Python es un entorno aislado en el que puedes instalar y administrar paquetes de manera independiente, sin afectar otros proyectos o el entorno global de Python en tu sistema. Cada ambiente virtual tiene su propia versión de Python, así como sus propios paquetes y dependencias, lo que permite mantener diferentes configuraciones para diferentes proyectos.

### Ventajas y uso de los ambientes virtuales

Los ambientes virtuales ofrecen varias ventajas, especialmente en proyectos de desarrollo y colaboración:

Separación de dependencias: Cada proyecto puede tener sus propias versiones de paquetes y dependencias, sin interferir con otros proyectos o con el entorno global de Python.

Facilita la colaboración: Al utilizar ambientes virtuales, los desarrolladores pueden compartir fácilmente las configuraciones de sus proyectos con otros colaboradores, lo que garantiza que todos trabajen con las mismas versiones de paquetes y dependencias.

Facilita la implementación y distribución: Los ambientes virtuales permiten empaquetar y distribuir proyectos con sus dependencias específicas, lo que facilita la implementación en diferentes entornos y sistemas.

### Creación y activación de ambientes virtuales en Python

Para crear y activar un ambiente virtual en Python, sigue los pasos a continuación:

Abre una terminal (o Anaconda Prompt en Windows).

Navega hasta el directorio donde deseas crear el ambiente virtual.

Ejecuta el siguiente comando para crear un ambiente virtual con el nombre "nombre_del_ambiente": ```python -m venv nombre_del_ambiente```. Puedes reemplazar "nombre_del_ambiente" con el nombre que prefieras para tu ambiente virtual.

Para activar el ambiente virtual, ejecuta uno de los siguientes comandos, según tu sistema operativo:

Windows: ```nombre_del_ambiente\Scripts\activate```

macOS y Linux: ```source nombre_del_ambiente/bin/activate```

Una vez activado, el nombre del ambiente virtual aparecerá entre paréntesis al comienzo del indicador de la terminal, indicando que estás trabajando en ese ambiente.

Para desactivar el ambiente virtual y volver al entorno global de Python, simplemente ejecuta el comando deactivate.

### Instalación y administración de paquetes en ambientes virtuales

Una vez que hayas activado un ambiente virtual, puedes instalar y administrar paquetes de manera independiente en ese ambiente. Para hacer esto, utiliza el administrador de paquetes pip, que se incluye automáticamente en cada ambiente virtual.

Para instalar un paquete en el ambiente virtual, ejecuta el siguiente comando: ```pip install nombre_del_paquete```. Puedes reemplazar "nombre_del_paquete" con el nombre del paquete que deseas instalar.

Para listar los paquetes instalados en el ambiente virtual, ejecuta el comando ```pip list```.

Para actualizar un paquete a la última versión compatible, ejecuta el siguiente comando: ```pip install --upgrade nombre_del_paquete```.

Para desinstalar un paquete del ambiente virtual, ejecuta el siguiente comando: ```pip uninstall nombre_del_paquete```.

Recuerda que estas acciones solo afectarán el ambiente virtual activo y no modificarán el entorno global de Python